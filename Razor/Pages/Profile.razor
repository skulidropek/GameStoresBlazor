@page "/profile"
@page "/profile/{PageName}"
@using GameStoresBlazor.Models.Pagination
@attribute [Authorize(Roles = "user")]
@inject DataBaseContext DataBaseContext
@inject UserManager<SteamIdentityUserModel> UserManager
@inject IHttpContextAccessor httpContextAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@using System.Threading

@if (currentUser == null)
{
    <p>Ошибка загрузки профиля пользователя.</p>
}
else
{
    <div class="container mt-3">
        <div class="row">
            <!-- Блок профиля -->
            <div class="col-md-3">
                <div class="text-center">
                    <img src="https://avatars.akamai.steamstatic.com/fef49e7fa7e1997310d705b2a6158ff8dc1cdfeb_full.jpg" class="img-thumbnail" alt="Изображение профиля">
                    <h3>@currentUser.Name</h3>
                    <button class="btn btn-primary btn-block">Выход</button>
                </div>
                <div class="list-group mt-3">
                    <a href="/profile" class="list-group-item list-group-item-action">Профиль</a>
                    <a href="/profile/Basket" class="list-group-item list-group-item-action">Корзина</a>
                    <a href="/profile/History" class="list-group-item list-group-item-action">История</a>
                </div>
            </div>

            <div class="col-md-9">
                @switch (PageName)
                {
                    case "Basket":
                        <Basket UserId="@currentUser.Id" />
                        break;
                    case "History":
                        <History UserId="@currentUser.Id" />
                        break;
                    default:
                        <ProfileDetails User="@currentUser" />
                        break;
                }
            </div>
        </div>
    </div>
}

@code {
    private SteamIdentityUserModel currentUser;
    [Parameter]
    public string PageName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InitializeCurrentUser();
    }

    private async Task InitializeCurrentUser()
    {
        using (var scope = ServiceProvider.CreateScope())
        {
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<SteamIdentityUserModel>>();
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (!string.IsNullOrEmpty(userId))
                {
                    currentUser = await userManager.FindByLoginAsync("Steam", user.Identity.Name);
                }
            }
        }
    }
}
